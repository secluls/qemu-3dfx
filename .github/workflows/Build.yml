name: CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:







  windows:


    runs-on: windows-latest
    strategy:
      matrix:
        cache-name: [msys64-cache]
    env:
      MSYSTEM: MINGW64
      FF_SCRIPT_SECTIONS: '0'
      CONFIGURE_ARGS: '--target-list=x86_64-softmmu --without-default-devices -Ddebug=false -Doptimization=0'
      TEST_ARGS: '--no-suite qtest'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2


      - name: Set up MSYS2
        run: |
          Write-Output "Acquiring msys2.exe installer at $(Get-Date -Format u)"
          If ( !(Test-Path -Path msys64\var\cache ) ) {
              mkdir msys64\var\cache
          }
          Invoke-WebRequest "https://repo.msys2.org/distrib/msys2-x86_64-latest.sfx.exe.sig" -outfile "msys2.exe.sig"
          if ( Test-Path -Path msys64\var\cache\msys2.exe.sig ) {
              Write-Output "Cached installer sig" ;
              if ( ((Get-FileHash msys2.exe.sig).Hash -ne (Get-FileHash msys64\var\cache\msys2.exe.sig).Hash) ) {
                  Write-Output "Mis-matched installer sig, new installer download required" ;
                  Remove-Item -Path msys64\var\cache\msys2.exe.sig ;
                  if ( Test-Path -Path msys64\var\cache\msys2.exe ) {
                      Remove-Item -Path msys64\var\cache\msys2.exe
                  }
              } else {
                  Write-Output "Matched installer sig, cached installer still valid"
              }
          } else {
              Write-Output "No cached installer sig, new installer download required" ;
              if ( Test-Path -Path msys64\var\cache\msys2.exe ) {
                  Remove-Item -Path msys64\var\cache\msys2.exe
              }
          }
          if ( !(Test-Path -Path msys64\var\cache\msys2.exe ) ) {
              Write-Output "Fetching latest installer" ;
              Invoke-WebRequest "https://repo.msys2.org/distrib/msys2-x86_64-latest.sfx.exe" -outfile "msys64\var\cache\msys2.exe" ;
              Copy-Item -Path msys2.exe.sig -Destination msys64\var\cache\msys2.exe.sig
          } else {
              Write-Output "Using cached installer"
          }
          Write-Output "Invoking msys2.exe installer at $(Get-Date -Format u)"
          msys64\var\cache\msys2.exe -y
          ((Get-Content -path .\msys64\etc\post-install\07-pacman-key.post -Raw) -replace '--refresh-keys', '--version') | Set-Content -Path .\msys64\etc\post-install\07-pacman-key.post
          .\msys64\usr\bin\bash -lc "sed -i 's/^CheckSpace/#CheckSpace/g' /etc/pacman.conf"
          .\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'  # Core update
          .\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'  # Normal update
          taskkill /F /FI "MODULES eq msys-2.0.dll"

      - name: Install dependencies
        run: |
          Write-Output "Installing mingw packages at $(Get-Date -Format u)"
          .\msys64\usr\bin\bash -lc 'pacman -Sy --noconfirm --needed \
          bison \
          diffutils \
          flex \
          tar \
          wget \
          git \
          grep \
          make \
          rsync \
          ninja \
          glib2-devel \
          patch \
          sed \
          mingw-w64-x86_64-binutils \
          mingw-w64-x86_64-capstone \
          mingw-w64-x86_64-ccache \
          mingw-w64-x86_64-curl \
          mingw-w64-x86_64-cyrus-sasl \
          mingw-w64-x86_64-dtc \
          mingw-w64-x86_64-gcc \
          mingw-w64-x86_64-pulseaudio \
          mingw-w64-x86_64-vala \
          mingw-w64-x86_64-glib2 \
          mingw-w64-x86_64-gnutls \
          mingw-w64-x86_64-gtk3 \
          mingw-w64-x86_64-libgcrypt \
          mingw-w64-x86_64-libjpeg-turbo \
          mingw-w64-x86_64-libnfs \
          mingw-w64-x86_64-libpng \
          mingw-w64-x86_64-libssh \
          mingw-w64-x86_64-libtasn1 \
          mingw-w64-x86_64-libusb \
          mingw-w64-x86_64-lzo2 \
          mingw-w64-x86_64-libslirp \
          mingw-w64-x86_64-nettle \
          mingw-w64-x86_64-clang \
          mingw-w64-x86_64-ninja \
          mingw-w64-x86_64-pixman \
          mingw-w64-x86_64-pkgconf \
          mingw-w64-x86_64-python \
          mingw-w64-x86_64-SDL2 \
          mingw-w64-x86_64-SDL2_image \
          mingw-w64-x86_64-snappy \
          mingw-w64-x86_64-spice \
          mingw-w64-x86_64-usbredir \
          mingw-w64-x86_64-zstd'

      - name: Build Qemu82X
        run: |
          Write-Output "Running build at $(Get-Date -Format u)"
          $env:CHERE_INVOKING = 'yes'  # Preserve the current working directory
          $env:MSYS = 'winsymlinks:native' # Enable native Windows symlink
          $env:CCACHE_BASEDIR = "$env:CI_PROJECT_DIR"
          $env:CCACHE_DIR = "$env:CCACHE_BASEDIR/ccache"
          $env:CCACHE_MAXSIZE = "500M"
          $env:CCACHE_DEPEND = 1 # cache misses are too expensive with preprocessor mode
          $env:CC = "ccache gcc"
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "wget --no-check-certificate https://download.qemu.org/qemu-8.2.5.tar.xz"
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "tar xfv qemu-8.2.5.tar.xz"
          mkdir bin
          cd qemu-8.2.5
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "rsync -r ../qemu-0/hw/3dfx ./hw/"
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "rsync -r ../qemu-1/hw/mesa ./hw/"
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "patch -p0 -i ../00-qemu82x-mesa-glide.patch"
          mkdir build
          cd build
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "ccache --zero-stats"
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "../configure --disable-werror --target-list=i386-softmmu --enable-whpx --enable-sdl --enable-slirp"
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "make -j$(nproc)"
          mkdir Bins
          cp *.exe ./Bins/
          cd ..
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "tar -czvf qemu82x.tar.gz ./build/Bins/"
          cd ..
          cp ./qemu-8.2.5/qemu82x.tar.gz ./bin
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "ccache --show-stats"
          Write-Output "Finished build at $(Get-Date -Format u)"


      - name: Build Qemu72X
        run: |
          Write-Output "Running build at $(Get-Date -Format u)"
          $env:CHERE_INVOKING = 'yes'  # Preserve the current working directory
          $env:MSYS = 'winsymlinks:native' # Enable native Windows symlink
          $env:CCACHE_BASEDIR = "$env:CI_PROJECT_DIR"
          $env:CCACHE_DIR = "$env:CCACHE_BASEDIR/ccache"
          $env:CCACHE_MAXSIZE = "500M"
          $env:CCACHE_DEPEND = 1 # cache misses are too expensive with preprocessor mode
          $env:CC = "ccache gcc"
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "wget --no-check-certificate https://download.qemu.org/qemu-7.2.12.tar.xz"
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "tar xfv qemu-7.2.12.tar.xz"
          cd qemu-7.2.12
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "rsync -r ../qemu-0/hw/3dfx ./hw/"
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "rsync -r ../qemu-1/hw/mesa ./hw/"
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "patch -p0 -i ../01-qemu72x-mesa-glide.patch"
          mkdir build
          cd build
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "ccache --zero-stats"
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "../configure --disable-werror --target-list=i386-softmmu --enable-whpx --enable-sdl --enable-slirp"
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "make -j$(nproc)"
          mkdir Bins
          cp *.exe ./Bins/
          cd ..
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "tar -czvf qemu72Xwin.tar.gz ./build/Bins/"
          cd ..
          cp ./qemu-7.2.12/qemu72Xwin.tar.gz ./bin
          D:\a\qemu-3dfx\qemu-3dfx\msys64\usr\bin\bash -lc "ccache --show-stats"
          Write-Output "Finished build at $(Get-Date -Format u)"



      - name: Upload Releases 
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            default_release_name: Qemu-3dfx
            file: ${{github.workspace}}/bin/
            draft: false
                


  Linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies
        uses: ConorMacBride/install-package@v1
        with:
          apt: >
            meson
            binutils-mips-linux-gnu
            ninja-build
            bsdmainutils
            build-essential
            libaudiofile-dev
            binutils-djgpp
            binutils-mingw-w64
            libdigest-sha-perl
            mingw-w64-tools
            libsdl2-dev
            libusb-1.0-0-dev
            gcc-mingw-w64
            g++-mingw-w64-i686
            g++-mingw-w64
            g++-10-multilib
            gcc-10-multilib
            gcc-mingw-w64-x86-64-win32-runtime
            gcc-mingw-w64-i686
            mingw-w64-x86-64-dev
            mingw-w64-i686-dev
            mingw-w64-common
            libx11-dev
            bison
            diffutils
            flex
            make
            sed
            libglib2.0-dev
            libfdt-dev
            libpixman-1-dev
            ninja-build
            zlib1g-dev
            libcapstone-dev
            libslirp-dev
            pkgconf
            python3

      - name: Build qemu82x
        run: |
          wget --no-check-certificate https://download.qemu.org/qemu-8.2.5.tar.xz
          tar xfv qemu-8.2.5.tar.xz
          mkdir bin
          cd qemu-8.2.5
          rsync -r ../qemu-0/hw/3dfx ./hw/
          rsync -r ../qemu-1/hw/mesa ./hw/
          patch -p0 -i ../00-qemu82x-mesa-glide.patch
          mkdir ../build && cd ../build
          ../qemu-8.2.5/configure --disable-werror --target-list=i386-softmmu --enable-kvm --enable-sdl --enable-slirp      
          make -j4
          cd ..
          tar -czvf qemu82xubuntu.tar.gz ./build
          ls
          cp qemu82xubuntu.tar.gz bin/
          
      - name: Build qemu72x
        run: |
          wget --no-check-certificate https://download.qemu.org/qemu-7.2.12.tar.xz
          tar xfv qemu-7.2.12.tar.xz
          cd qemu-7.2.12
          rsync -r ../qemu-0/hw/3dfx ./hw/
          rsync -r ../qemu-1/hw/mesa ./hw/
          patch -p0 -i ../01-qemu72x-mesa-glide.patch
          mkdir ../build && cd ../build
          ../qemu-7.2.12/configure --disable-werror --target-list=i386-softmmu --enable-kvm --enable-sdl --enable-slirp      
          make -j4
          cd ..
          tar -czvf qemu72xubuntu.tar.gz ./build
          ls
          cp qemu72xubuntu.tar.gz bin/

      - name: Upload Releases 
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          default_release_name: Qemu-3dfx
          file: ${{github.workspace}}/bin/
          draft: false





  wrappers:
            runs-on: ubuntu-latest
            steps:
              - name: Checkout
                uses: actions/checkout@v4
              - name: Install dependencies
                uses: ConorMacBride/install-package@v1
                with:
                  apt: >
                    binutils-mips-linux-gnu
                    ninja-build
                    bsdmainutils
                    build-essential
                    libaudiofile-dev
                    binutils-djgpp
                    binutils-mingw-w64
                    libdigest-sha-perl
                    mingw-w64-tools
                    libsdl2-dev
                    libusb-1.0-0-dev
                    gcc-mingw-w64
                    g++-mingw-w64-i686
                    g++-mingw-w64
                    g++-10-multilib
                    gcc-10-multilib
                    gcc-mingw-w64-x86-64-win32-runtime
                    gcc-mingw-w64-i686
                    mingw-w64-x86-64-dev
                    mingw-w64-i686-dev
                    mingw-w64-common
                    libx11-dev
                    libcapstone-dev
                    pkgconf
                    python3
              - name: Build Wrappers/3dfx
                run: |
                  cd wrappers/3dfx
                  mkdir build && cd build
                  bash ../../../scripts/conf_wrapper
                  make
            
              - name: Build Wrappers/Mesa
                run: |
                  cd wrappers/mesa
                  mkdir build && cd build
                  bash ../../../scripts/conf_wrapper
                  make
        
              - name: Build Wrappers/Openglide
                run: |
                  git clone https://github.com/kjliew/qemu-xtra.git
                  cd qemu-xtra
                  cd openglide
                  bash ./bootstrap
                  mkdir build && cd build
                  ../configure && make


              - name: Package
                run: |
                 mkdir wrapbin
                 mkdir wrapbin/3dfx/
                 mkdir wrapbin/mesa/
                 mkdir wrapbin/openglide/
                 ls
                 cp -r wrappers/3dfx/build/ ./wrapbin/3dfx/
                 cp -r wrappers/mesa/build/ ./wrapbin/mesa/
                 cp -r qemu-xtra/openglide/build/ ./wrapbin/openglide/
                 tar -czvf wrapbin.tar.gz wrapbin


                  
        
                  
              - name: Upload Releases 
                uses: xresloader/upload-to-github-release@v1
                env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                with:
                  default_release_name: Qemu-3dfx
                  file: ${{github.workspace}}/wrapbin.tar.gz
                  draft: false
